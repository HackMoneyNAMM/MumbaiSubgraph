// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class pong extends ethereum.Event {
  get params(): pong__Params {
    return new pong__Params(this);
  }
}

export class pong__Params {
  _event: pong;

  constructor(event: pong) {
    this._event = event;
  }

  get cntr(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class poolDeploy extends ethereum.Event {
  get params(): poolDeploy__Params {
    return new poolDeploy__Params(this);
  }
}

export class poolDeploy__Params {
  _event: poolDeploy;

  constructor(event: poolDeploy) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolFactory extends ethereum.SmartContract {
  static bind(address: Address): PoolFactory {
    return new PoolFactory("PoolFactory", address);
  }

  newPool(
    poolName: string,
    poolTicker: string,
    tokens: Array<Address>,
    tokenNames: Array<string>,
    sigma: BigInt,
    eta: BigInt
  ): Address {
    let result = super.call(
      "newPool",
      "newPool(string,string,address[],string[],uint256,uint256):(address)",
      [
        ethereum.Value.fromString(poolName),
        ethereum.Value.fromString(poolTicker),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromStringArray(tokenNames),
        ethereum.Value.fromUnsignedBigInt(sigma),
        ethereum.Value.fromUnsignedBigInt(eta)
      ]
    );

    return result[0].toAddress();
  }

  try_newPool(
    poolName: string,
    poolTicker: string,
    tokens: Array<Address>,
    tokenNames: Array<string>,
    sigma: BigInt,
    eta: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newPool",
      "newPool(string,string,address[],string[],uint256,uint256):(address)",
      [
        ethereum.Value.fromString(poolName),
        ethereum.Value.fromString(poolTicker),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromStringArray(tokenNames),
        ethereum.Value.fromUnsignedBigInt(sigma),
        ethereum.Value.fromUnsignedBigInt(eta)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class NewPoolCall extends ethereum.Call {
  get inputs(): NewPoolCall__Inputs {
    return new NewPoolCall__Inputs(this);
  }

  get outputs(): NewPoolCall__Outputs {
    return new NewPoolCall__Outputs(this);
  }
}

export class NewPoolCall__Inputs {
  _call: NewPoolCall;

  constructor(call: NewPoolCall) {
    this._call = call;
  }

  get poolName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get poolTicker(): string {
    return this._call.inputValues[1].value.toString();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get tokenNames(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }

  get sigma(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get eta(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class NewPoolCall__Outputs {
  _call: NewPoolCall;

  constructor(call: NewPoolCall) {
    this._call = call;
  }

  get poolAddr(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class PingCall extends ethereum.Call {
  get inputs(): PingCall__Inputs {
    return new PingCall__Inputs(this);
  }

  get outputs(): PingCall__Outputs {
    return new PingCall__Outputs(this);
  }
}

export class PingCall__Inputs {
  _call: PingCall;

  constructor(call: PingCall) {
    this._call = call;
  }
}

export class PingCall__Outputs {
  _call: PingCall;

  constructor(call: PingCall) {
    this._call = call;
  }
}
